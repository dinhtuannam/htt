// <auto-generated />
using System;
using InitDatabase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InitDatabase.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240320044546_database_v2")]
    partial class database_v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InitDatabase.Data.SqlAction", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tb_actions");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlCategory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tb_categories");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlDetailImportBill", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("billid")
                        .HasColumnType("bigint");

                    b.Property<long?>("ingredientid")
                        .HasColumnType("bigint");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<double>("total")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.HasIndex("billid");

                    b.HasIndex("ingredientid");

                    b.ToTable("tb_detail_import_bill");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlDetailOrder", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("invoiceid")
                        .HasColumnType("bigint");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("itemid")
                        .HasColumnType("bigint");

                    b.Property<long?>("orderid")
                        .HasColumnType("bigint");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<double>("profit")
                        .HasColumnType("double precision");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<double>("total")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.HasIndex("invoiceid");

                    b.HasIndex("itemid");

                    b.HasIndex("orderid");

                    b.ToTable("tb_detail_order");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlDetailRecipe", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("ingredientid")
                        .HasColumnType("bigint");

                    b.Property<decimal>("quantity")
                        .HasColumnType("numeric");

                    b.Property<long?>("recipeid")
                        .HasColumnType("bigint");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ingredientid");

                    b.HasIndex("recipeid");

                    b.ToTable("tb_detail_recipe");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlDiscount", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("expiredTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("minimum")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("remaining")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("value")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("tb_discounts");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlImportBill", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("import_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<long?>("supplierid")
                        .HasColumnType("bigint");

                    b.Property<double>("total")
                        .HasColumnType("double precision");

                    b.Property<long?>("userid")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("supplierid");

                    b.HasIndex("userid");

                    b.ToTable("tb_import_bill");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlIngredient", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tb_ingredients");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlInvoice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.Property<double>("discount_price")
                        .HasColumnType("double precision");

                    b.Property<string>("discountid")
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("total")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.HasIndex("discountid");

                    b.ToTable("tb_invoices");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlLogTable", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("actionid")
                        .HasColumnType("text");

                    b.Property<string>("customerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("tableid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("actionid");

                    b.HasIndex("tableid");

                    b.ToTable("tb_log_table");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlMenuItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("categoryid")
                        .HasColumnType("bigint");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("imagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ingredients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<double>("profit")
                        .HasColumnType("double precision");

                    b.Property<long?>("recipesid")
                        .HasColumnType("bigint");

                    b.Property<string>("statusid")
                        .HasColumnType("text");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("categoryid");

                    b.HasIndex("recipesid");

                    b.HasIndex("statusid");

                    b.ToTable("tb_menu_item");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlMenuItemStatus", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tb_menu_item_status");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlOrder", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customer_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("staffid")
                        .HasColumnType("bigint");

                    b.Property<long?>("tableid")
                        .HasColumnType("bigint");

                    b.Property<double>("total")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("staffid");

                    b.HasIndex("tableid");

                    b.ToTable("tb_orders");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlRecipe", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tb_recipes");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlRole", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tb_roles");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlSupplier", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tb_supplier");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlTable", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customer_code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("statusid")
                        .HasColumnType("text");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("statusid");

                    b.ToTable("tb_tables");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlTableStatus", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tb_table_status");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlUser", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("roleid")
                        .HasColumnType("text");

                    b.Property<DateTime>("updateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("roleid");

                    b.ToTable("tb_users");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlDetailImportBill", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlImportBill", "bill")
                        .WithMany("details")
                        .HasForeignKey("billid");

                    b.HasOne("InitDatabase.Data.SqlIngredient", "ingredient")
                        .WithMany("detail_bill")
                        .HasForeignKey("ingredientid");

                    b.Navigation("bill");

                    b.Navigation("ingredient");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlDetailOrder", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlInvoice", "invoice")
                        .WithMany("orders")
                        .HasForeignKey("invoiceid");

                    b.HasOne("InitDatabase.Data.SqlMenuItem", "item")
                        .WithMany()
                        .HasForeignKey("itemid");

                    b.HasOne("InitDatabase.Data.SqlOrder", "order")
                        .WithMany("details")
                        .HasForeignKey("orderid");

                    b.Navigation("invoice");

                    b.Navigation("item");

                    b.Navigation("order");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlDetailRecipe", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlIngredient", "ingredient")
                        .WithMany("detail_recipes")
                        .HasForeignKey("ingredientid");

                    b.HasOne("InitDatabase.Data.SqlRecipe", "recipe")
                        .WithMany("detail_recipes")
                        .HasForeignKey("recipeid");

                    b.Navigation("ingredient");

                    b.Navigation("recipe");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlImportBill", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlSupplier", "supplier")
                        .WithMany("bills")
                        .HasForeignKey("supplierid");

                    b.HasOne("InitDatabase.Data.SqlUser", "user")
                        .WithMany("bills")
                        .HasForeignKey("userid");

                    b.Navigation("supplier");

                    b.Navigation("user");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlInvoice", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlDiscount", "discount")
                        .WithMany()
                        .HasForeignKey("discountid");

                    b.Navigation("discount");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlLogTable", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlAction", "action")
                        .WithMany("logs")
                        .HasForeignKey("actionid");

                    b.HasOne("InitDatabase.Data.SqlTable", "table")
                        .WithMany("logs")
                        .HasForeignKey("tableid");

                    b.Navigation("action");

                    b.Navigation("table");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlMenuItem", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlCategory", "category")
                        .WithMany("menuItems")
                        .HasForeignKey("categoryid");

                    b.HasOne("InitDatabase.Data.SqlRecipe", "recipes")
                        .WithMany("menu")
                        .HasForeignKey("recipesid");

                    b.HasOne("InitDatabase.Data.SqlMenuItemStatus", "status")
                        .WithMany("menuItems")
                        .HasForeignKey("statusid");

                    b.Navigation("category");

                    b.Navigation("recipes");

                    b.Navigation("status");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlOrder", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlUser", "staff")
                        .WithMany("staffOrders")
                        .HasForeignKey("staffid");

                    b.HasOne("InitDatabase.Data.SqlTable", "table")
                        .WithMany()
                        .HasForeignKey("tableid");

                    b.Navigation("staff");

                    b.Navigation("table");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlTable", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlTableStatus", "status")
                        .WithMany("tables")
                        .HasForeignKey("statusid");

                    b.Navigation("status");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlUser", b =>
                {
                    b.HasOne("InitDatabase.Data.SqlRole", "role")
                        .WithMany("users")
                        .HasForeignKey("roleid");

                    b.Navigation("role");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlAction", b =>
                {
                    b.Navigation("logs");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlCategory", b =>
                {
                    b.Navigation("menuItems");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlImportBill", b =>
                {
                    b.Navigation("details");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlIngredient", b =>
                {
                    b.Navigation("detail_bill");

                    b.Navigation("detail_recipes");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlInvoice", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlMenuItemStatus", b =>
                {
                    b.Navigation("menuItems");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlOrder", b =>
                {
                    b.Navigation("details");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlRecipe", b =>
                {
                    b.Navigation("detail_recipes");

                    b.Navigation("menu");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlRole", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlSupplier", b =>
                {
                    b.Navigation("bills");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlTable", b =>
                {
                    b.Navigation("logs");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlTableStatus", b =>
                {
                    b.Navigation("tables");
                });

            modelBuilder.Entity("InitDatabase.Data.SqlUser", b =>
                {
                    b.Navigation("bills");

                    b.Navigation("staffOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
